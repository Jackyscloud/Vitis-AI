# GENETARED BY NNDCT, DO NOT EDIT!

import torch
from torch import tensor
import pytorch_nndct as py_nndct

class DetectMultiBackend(py_nndct.nn.NndctQuantModel):
    def __init__(self):
        super(DetectMultiBackend, self).__init__()
        self.module_0 = py_nndct.nn.Module('nndct_const') #DetectMultiBackend::16113(DetectMultiBackend::nndct_const_0)
        self.module_1 = py_nndct.nn.Module('nndct_const') #DetectMultiBackend::16115(DetectMultiBackend::nndct_const_1)
        self.module_2 = py_nndct.nn.Module('nndct_const') #DetectMultiBackend::16117(DetectMultiBackend::nndct_const_2)
        self.module_3 = py_nndct.nn.Module('nndct_const') #DetectMultiBackend::16119(DetectMultiBackend::nndct_const_3)
        self.module_4 = py_nndct.nn.Module('nndct_const') #DetectMultiBackend::16101(DetectMultiBackend::nndct_const_4)
        self.module_5 = py_nndct.nn.Module('nndct_const') #DetectMultiBackend::16103(DetectMultiBackend::nndct_const_5)
        self.module_6 = py_nndct.nn.Module('nndct_const') #DetectMultiBackend::16105(DetectMultiBackend::nndct_const_6)
        self.module_7 = py_nndct.nn.Module('nndct_const') #DetectMultiBackend::16107(DetectMultiBackend::nndct_const_7)
        self.module_8 = py_nndct.nn.Module('nndct_const') #DetectMultiBackend::16089(DetectMultiBackend::nndct_const_8)
        self.module_9 = py_nndct.nn.Module('nndct_const') #DetectMultiBackend::16091(DetectMultiBackend::nndct_const_9)
        self.module_10 = py_nndct.nn.Module('nndct_const') #DetectMultiBackend::16093(DetectMultiBackend::nndct_const_10)
        self.module_11 = py_nndct.nn.Module('nndct_const') #DetectMultiBackend::16095(DetectMultiBackend::nndct_const_11)
        self.module_12 = py_nndct.nn.Module('nndct_const') #DetectMultiBackend::16087(DetectMultiBackend::nndct_const_12)
        self.module_13 = py_nndct.nn.Module('nndct_const') #DetectMultiBackend::16099(DetectMultiBackend::nndct_const_13)
        self.module_14 = py_nndct.nn.Module('nndct_const') #DetectMultiBackend::16111(DetectMultiBackend::nndct_const_14)
        self.module_15 = py_nndct.nn.Module('nndct_const') #DetectMultiBackend::16109(DetectMultiBackend::nndct_const_15)
        self.module_16 = py_nndct.nn.Module('nndct_const') #DetectMultiBackend::16097(DetectMultiBackend::nndct_const_16)
        self.module_17 = py_nndct.nn.Module('nndct_const') #DetectMultiBackend::16085(DetectMultiBackend::nndct_const_17)
        self.module_18 = py_nndct.nn.Input() #DetectMultiBackend::input_0(DetectMultiBackend::nndct_input_18)
        self.module_19 = py_nndct.nn.Conv2d(in_channels=3, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[0]/Conv2d[conv]/ret.3(DetectMultiBackend::nndct_conv2d_19)
        self.module_20 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[0]/ReLU[act]/13457(DetectMultiBackend::nndct_relu_20)
        self.module_21 = py_nndct.nn.Conv2d(in_channels=32, out_channels=64, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[1]/Conv2d[conv]/ret.5(DetectMultiBackend::nndct_conv2d_21)
        self.module_22 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[1]/ReLU[act]/13478(DetectMultiBackend::nndct_relu_22)
        self.module_23 = py_nndct.nn.Conv2d(in_channels=64, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Conv[cv1]/Conv2d[conv]/ret.7(DetectMultiBackend::nndct_conv2d_23)
        self.module_24 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Conv[cv1]/ReLU[act]/13499(DetectMultiBackend::nndct_relu_24)
        self.module_25 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Sequential[m]/Bottleneck[0]/Conv[cv1]/Conv2d[conv]/ret.9(DetectMultiBackend::nndct_conv2d_25)
        self.module_26 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Sequential[m]/Bottleneck[0]/Conv[cv1]/ReLU[act]/13520(DetectMultiBackend::nndct_relu_26)
        self.module_27 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Sequential[m]/Bottleneck[0]/Conv[cv2]/Conv2d[conv]/ret.11(DetectMultiBackend::nndct_conv2d_27)
        self.module_28 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Sequential[m]/Bottleneck[0]/Conv[cv2]/ReLU[act]/13541(DetectMultiBackend::nndct_relu_28)
        self.module_29 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Sequential[m]/Bottleneck[0]/ret.13(DetectMultiBackend::nndct_elemwise_add_29)
        self.module_30 = py_nndct.nn.Conv2d(in_channels=64, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Conv[cv2]/Conv2d[conv]/ret.15(DetectMultiBackend::nndct_conv2d_30)
        self.module_31 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Conv[cv2]/ReLU[act]/13565(DetectMultiBackend::nndct_relu_31)
        self.module_32 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/ret.17(DetectMultiBackend::nndct_concat_32)
        self.module_33 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Conv[cv3]/Conv2d[conv]/ret.19(DetectMultiBackend::nndct_conv2d_33)
        self.module_34 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[2]/Conv[cv3]/ReLU[act]/13590(DetectMultiBackend::nndct_relu_34)
        self.module_35 = py_nndct.nn.Conv2d(in_channels=64, out_channels=128, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[3]/Conv2d[conv]/ret.21(DetectMultiBackend::nndct_conv2d_35)
        self.module_36 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[3]/ReLU[act]/13611(DetectMultiBackend::nndct_relu_36)
        self.module_37 = py_nndct.nn.Conv2d(in_channels=128, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Conv[cv1]/Conv2d[conv]/ret.23(DetectMultiBackend::nndct_conv2d_37)
        self.module_38 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Conv[cv1]/ReLU[act]/13632(DetectMultiBackend::nndct_relu_38)
        self.module_39 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[0]/Conv[cv1]/Conv2d[conv]/ret.25(DetectMultiBackend::nndct_conv2d_39)
        self.module_40 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[0]/Conv[cv1]/ReLU[act]/13653(DetectMultiBackend::nndct_relu_40)
        self.module_41 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[0]/Conv[cv2]/Conv2d[conv]/ret.27(DetectMultiBackend::nndct_conv2d_41)
        self.module_42 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[0]/Conv[cv2]/ReLU[act]/13674(DetectMultiBackend::nndct_relu_42)
        self.module_43 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[0]/ret.29(DetectMultiBackend::nndct_elemwise_add_43)
        self.module_44 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[1]/Conv[cv1]/Conv2d[conv]/ret.31(DetectMultiBackend::nndct_conv2d_44)
        self.module_45 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[1]/Conv[cv1]/ReLU[act]/13698(DetectMultiBackend::nndct_relu_45)
        self.module_46 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[1]/Conv[cv2]/Conv2d[conv]/ret.33(DetectMultiBackend::nndct_conv2d_46)
        self.module_47 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[1]/Conv[cv2]/ReLU[act]/13719(DetectMultiBackend::nndct_relu_47)
        self.module_48 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Sequential[m]/Bottleneck[1]/ret.35(DetectMultiBackend::nndct_elemwise_add_48)
        self.module_49 = py_nndct.nn.Conv2d(in_channels=128, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Conv[cv2]/Conv2d[conv]/ret.37(DetectMultiBackend::nndct_conv2d_49)
        self.module_50 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Conv[cv2]/ReLU[act]/13743(DetectMultiBackend::nndct_relu_50)
        self.module_51 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/ret.39(DetectMultiBackend::nndct_concat_51)
        self.module_52 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Conv[cv3]/Conv2d[conv]/ret.41(DetectMultiBackend::nndct_conv2d_52)
        self.module_53 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[4]/Conv[cv3]/ReLU[act]/13768(DetectMultiBackend::nndct_relu_53)
        self.module_54 = py_nndct.nn.Conv2d(in_channels=128, out_channels=256, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[5]/Conv2d[conv]/ret.43(DetectMultiBackend::nndct_conv2d_54)
        self.module_55 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[5]/ReLU[act]/13789(DetectMultiBackend::nndct_relu_55)
        self.module_56 = py_nndct.nn.Conv2d(in_channels=256, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Conv[cv1]/Conv2d[conv]/ret.45(DetectMultiBackend::nndct_conv2d_56)
        self.module_57 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Conv[cv1]/ReLU[act]/13810(DetectMultiBackend::nndct_relu_57)
        self.module_58 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[0]/Conv[cv1]/Conv2d[conv]/ret.47(DetectMultiBackend::nndct_conv2d_58)
        self.module_59 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[0]/Conv[cv1]/ReLU[act]/13831(DetectMultiBackend::nndct_relu_59)
        self.module_60 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[0]/Conv[cv2]/Conv2d[conv]/ret.49(DetectMultiBackend::nndct_conv2d_60)
        self.module_61 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[0]/Conv[cv2]/ReLU[act]/13852(DetectMultiBackend::nndct_relu_61)
        self.module_62 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[0]/ret.51(DetectMultiBackend::nndct_elemwise_add_62)
        self.module_63 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[1]/Conv[cv1]/Conv2d[conv]/ret.53(DetectMultiBackend::nndct_conv2d_63)
        self.module_64 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[1]/Conv[cv1]/ReLU[act]/13876(DetectMultiBackend::nndct_relu_64)
        self.module_65 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[1]/Conv[cv2]/Conv2d[conv]/ret.55(DetectMultiBackend::nndct_conv2d_65)
        self.module_66 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[1]/Conv[cv2]/ReLU[act]/13897(DetectMultiBackend::nndct_relu_66)
        self.module_67 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[1]/ret.57(DetectMultiBackend::nndct_elemwise_add_67)
        self.module_68 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[2]/Conv[cv1]/Conv2d[conv]/ret.59(DetectMultiBackend::nndct_conv2d_68)
        self.module_69 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[2]/Conv[cv1]/ReLU[act]/13921(DetectMultiBackend::nndct_relu_69)
        self.module_70 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[2]/Conv[cv2]/Conv2d[conv]/ret.61(DetectMultiBackend::nndct_conv2d_70)
        self.module_71 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[2]/Conv[cv2]/ReLU[act]/13942(DetectMultiBackend::nndct_relu_71)
        self.module_72 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Sequential[m]/Bottleneck[2]/ret.63(DetectMultiBackend::nndct_elemwise_add_72)
        self.module_73 = py_nndct.nn.Conv2d(in_channels=256, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Conv[cv2]/Conv2d[conv]/ret.65(DetectMultiBackend::nndct_conv2d_73)
        self.module_74 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Conv[cv2]/ReLU[act]/13966(DetectMultiBackend::nndct_relu_74)
        self.module_75 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/ret.67(DetectMultiBackend::nndct_concat_75)
        self.module_76 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Conv[cv3]/Conv2d[conv]/ret.69(DetectMultiBackend::nndct_conv2d_76)
        self.module_77 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[6]/Conv[cv3]/ReLU[act]/13991(DetectMultiBackend::nndct_relu_77)
        self.module_78 = py_nndct.nn.Conv2d(in_channels=256, out_channels=512, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[7]/Conv2d[conv]/ret.71(DetectMultiBackend::nndct_conv2d_78)
        self.module_79 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[7]/ReLU[act]/14012(DetectMultiBackend::nndct_relu_79)
        self.module_80 = py_nndct.nn.Conv2d(in_channels=512, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Conv[cv1]/Conv2d[conv]/ret.73(DetectMultiBackend::nndct_conv2d_80)
        self.module_81 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Conv[cv1]/ReLU[act]/14033(DetectMultiBackend::nndct_relu_81)
        self.module_82 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Sequential[m]/Bottleneck[0]/Conv[cv1]/Conv2d[conv]/ret.75(DetectMultiBackend::nndct_conv2d_82)
        self.module_83 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Sequential[m]/Bottleneck[0]/Conv[cv1]/ReLU[act]/14054(DetectMultiBackend::nndct_relu_83)
        self.module_84 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Sequential[m]/Bottleneck[0]/Conv[cv2]/Conv2d[conv]/ret.77(DetectMultiBackend::nndct_conv2d_84)
        self.module_85 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Sequential[m]/Bottleneck[0]/Conv[cv2]/ReLU[act]/14075(DetectMultiBackend::nndct_relu_85)
        self.module_86 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Sequential[m]/Bottleneck[0]/ret.79(DetectMultiBackend::nndct_elemwise_add_86)
        self.module_87 = py_nndct.nn.Conv2d(in_channels=512, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Conv[cv2]/Conv2d[conv]/ret.81(DetectMultiBackend::nndct_conv2d_87)
        self.module_88 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Conv[cv2]/ReLU[act]/14099(DetectMultiBackend::nndct_relu_88)
        self.module_89 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/ret.83(DetectMultiBackend::nndct_concat_89)
        self.module_90 = py_nndct.nn.Conv2d(in_channels=512, out_channels=512, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Conv[cv3]/Conv2d[conv]/ret.85(DetectMultiBackend::nndct_conv2d_90)
        self.module_91 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[8]/Conv[cv3]/ReLU[act]/14124(DetectMultiBackend::nndct_relu_91)
        self.module_92 = py_nndct.nn.Conv2d(in_channels=512, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/SPPF[model]/SPPF[9]/Conv[cv1]/Conv2d[conv]/ret.87(DetectMultiBackend::nndct_conv2d_92)
        self.module_93 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/SPPF[model]/SPPF[9]/Conv[cv1]/ReLU[act]/14145(DetectMultiBackend::nndct_relu_93)
        self.module_94 = py_nndct.nn.MaxPool2d(kernel_size=[5, 5], stride=[1, 1], padding=[2, 2], dilation=[1, 1], ceil_mode=False) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/SPPF[model]/SPPF[9]/MaxPool2d[m]/14160(DetectMultiBackend::nndct_maxpool_94)
        self.module_95 = py_nndct.nn.MaxPool2d(kernel_size=[5, 5], stride=[1, 1], padding=[2, 2], dilation=[1, 1], ceil_mode=False) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/SPPF[model]/SPPF[9]/MaxPool2d[m]/14176(DetectMultiBackend::nndct_maxpool_95)
        self.module_96 = py_nndct.nn.MaxPool2d(kernel_size=[5, 5], stride=[1, 1], padding=[2, 2], dilation=[1, 1], ceil_mode=False) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/SPPF[model]/SPPF[9]/MaxPool2d[m]/14192(DetectMultiBackend::nndct_maxpool_96)
        self.module_97 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/SPPF[model]/SPPF[9]/ret.89(DetectMultiBackend::nndct_concat_97)
        self.module_98 = py_nndct.nn.Conv2d(in_channels=1024, out_channels=512, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/SPPF[model]/SPPF[9]/Conv[cv2]/Conv2d[conv]/ret.91(DetectMultiBackend::nndct_conv2d_98)
        self.module_99 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/SPPF[model]/SPPF[9]/Conv[cv2]/ReLU[act]/14218(DetectMultiBackend::nndct_relu_99)
        self.module_100 = py_nndct.nn.Conv2d(in_channels=512, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[10]/Conv2d[conv]/ret.93(DetectMultiBackend::nndct_conv2d_100)
        self.module_101 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[10]/ReLU[act]/14239(DetectMultiBackend::nndct_relu_101)
        self.module_102 = py_nndct.nn.Interpolate() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Upsample[model]/Upsample[11]/ret.95(DetectMultiBackend::nndct_resize_102)
        self.module_103 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Concat[model]/Concat[12]/ret.97(DetectMultiBackend::nndct_concat_103)
        self.module_104 = py_nndct.nn.Conv2d(in_channels=512, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Conv[cv1]/Conv2d[conv]/ret.99(DetectMultiBackend::nndct_conv2d_104)
        self.module_105 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Conv[cv1]/ReLU[act]/14270(DetectMultiBackend::nndct_relu_105)
        self.module_106 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Sequential[m]/Bottleneck[0]/Conv[cv1]/Conv2d[conv]/ret.101(DetectMultiBackend::nndct_conv2d_106)
        self.module_107 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Sequential[m]/Bottleneck[0]/Conv[cv1]/ReLU[act]/14291(DetectMultiBackend::nndct_relu_107)
        self.module_108 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Sequential[m]/Bottleneck[0]/Conv[cv2]/Conv2d[conv]/ret.103(DetectMultiBackend::nndct_conv2d_108)
        self.module_109 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Sequential[m]/Bottleneck[0]/Conv[cv2]/ReLU[act]/14312(DetectMultiBackend::nndct_relu_109)
        self.module_110 = py_nndct.nn.Conv2d(in_channels=512, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Conv[cv2]/Conv2d[conv]/ret.105(DetectMultiBackend::nndct_conv2d_110)
        self.module_111 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Conv[cv2]/ReLU[act]/14333(DetectMultiBackend::nndct_relu_111)
        self.module_112 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/ret.107(DetectMultiBackend::nndct_concat_112)
        self.module_113 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Conv[cv3]/Conv2d[conv]/ret.109(DetectMultiBackend::nndct_conv2d_113)
        self.module_114 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[13]/Conv[cv3]/ReLU[act]/14358(DetectMultiBackend::nndct_relu_114)
        self.module_115 = py_nndct.nn.Conv2d(in_channels=256, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[14]/Conv2d[conv]/ret.111(DetectMultiBackend::nndct_conv2d_115)
        self.module_116 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[14]/ReLU[act]/14379(DetectMultiBackend::nndct_relu_116)
        self.module_117 = py_nndct.nn.Interpolate() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Upsample[model]/Upsample[15]/ret.113(DetectMultiBackend::nndct_resize_117)
        self.module_118 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Concat[model]/Concat[16]/ret.115(DetectMultiBackend::nndct_concat_118)
        self.module_119 = py_nndct.nn.Conv2d(in_channels=256, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Conv[cv1]/Conv2d[conv]/ret.117(DetectMultiBackend::nndct_conv2d_119)
        self.module_120 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Conv[cv1]/ReLU[act]/14410(DetectMultiBackend::nndct_relu_120)
        self.module_121 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Sequential[m]/Bottleneck[0]/Conv[cv1]/Conv2d[conv]/ret.119(DetectMultiBackend::nndct_conv2d_121)
        self.module_122 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Sequential[m]/Bottleneck[0]/Conv[cv1]/ReLU[act]/14431(DetectMultiBackend::nndct_relu_122)
        self.module_123 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Sequential[m]/Bottleneck[0]/Conv[cv2]/Conv2d[conv]/ret.121(DetectMultiBackend::nndct_conv2d_123)
        self.module_124 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Sequential[m]/Bottleneck[0]/Conv[cv2]/ReLU[act]/14452(DetectMultiBackend::nndct_relu_124)
        self.module_125 = py_nndct.nn.Conv2d(in_channels=256, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Conv[cv2]/Conv2d[conv]/ret.123(DetectMultiBackend::nndct_conv2d_125)
        self.module_126 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Conv[cv2]/ReLU[act]/14473(DetectMultiBackend::nndct_relu_126)
        self.module_127 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/ret.125(DetectMultiBackend::nndct_concat_127)
        self.module_128 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Conv[cv3]/Conv2d[conv]/ret.127(DetectMultiBackend::nndct_conv2d_128)
        self.module_129 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[17]/Conv[cv3]/ReLU[act]/14498(DetectMultiBackend::nndct_relu_129)
        self.module_130 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[18]/Conv2d[conv]/ret.129(DetectMultiBackend::nndct_conv2d_130)
        self.module_131 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[18]/ReLU[act]/14519(DetectMultiBackend::nndct_relu_131)
        self.module_132 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Concat[model]/Concat[19]/ret.131(DetectMultiBackend::nndct_concat_132)
        self.module_133 = py_nndct.nn.Conv2d(in_channels=256, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Conv[cv1]/Conv2d[conv]/ret.133(DetectMultiBackend::nndct_conv2d_133)
        self.module_134 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Conv[cv1]/ReLU[act]/14544(DetectMultiBackend::nndct_relu_134)
        self.module_135 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Sequential[m]/Bottleneck[0]/Conv[cv1]/Conv2d[conv]/ret.135(DetectMultiBackend::nndct_conv2d_135)
        self.module_136 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Sequential[m]/Bottleneck[0]/Conv[cv1]/ReLU[act]/14565(DetectMultiBackend::nndct_relu_136)
        self.module_137 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Sequential[m]/Bottleneck[0]/Conv[cv2]/Conv2d[conv]/ret.137(DetectMultiBackend::nndct_conv2d_137)
        self.module_138 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Sequential[m]/Bottleneck[0]/Conv[cv2]/ReLU[act]/14586(DetectMultiBackend::nndct_relu_138)
        self.module_139 = py_nndct.nn.Conv2d(in_channels=256, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Conv[cv2]/Conv2d[conv]/ret.139(DetectMultiBackend::nndct_conv2d_139)
        self.module_140 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Conv[cv2]/ReLU[act]/14607(DetectMultiBackend::nndct_relu_140)
        self.module_141 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/ret.141(DetectMultiBackend::nndct_concat_141)
        self.module_142 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Conv[cv3]/Conv2d[conv]/ret.143(DetectMultiBackend::nndct_conv2d_142)
        self.module_143 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[20]/Conv[cv3]/ReLU[act]/14632(DetectMultiBackend::nndct_relu_143)
        self.module_144 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[21]/Conv2d[conv]/ret.145(DetectMultiBackend::nndct_conv2d_144)
        self.module_145 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Conv[model]/Conv[21]/ReLU[act]/14653(DetectMultiBackend::nndct_relu_145)
        self.module_146 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Concat[model]/Concat[22]/ret.147(DetectMultiBackend::nndct_concat_146)
        self.module_147 = py_nndct.nn.Conv2d(in_channels=512, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Conv[cv1]/Conv2d[conv]/ret.149(DetectMultiBackend::nndct_conv2d_147)
        self.module_148 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Conv[cv1]/ReLU[act]/14678(DetectMultiBackend::nndct_relu_148)
        self.module_149 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Sequential[m]/Bottleneck[0]/Conv[cv1]/Conv2d[conv]/ret.151(DetectMultiBackend::nndct_conv2d_149)
        self.module_150 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Sequential[m]/Bottleneck[0]/Conv[cv1]/ReLU[act]/14699(DetectMultiBackend::nndct_relu_150)
        self.module_151 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Sequential[m]/Bottleneck[0]/Conv[cv2]/Conv2d[conv]/ret.153(DetectMultiBackend::nndct_conv2d_151)
        self.module_152 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Sequential[m]/Bottleneck[0]/Conv[cv2]/ReLU[act]/14720(DetectMultiBackend::nndct_relu_152)
        self.module_153 = py_nndct.nn.Conv2d(in_channels=512, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Conv[cv2]/Conv2d[conv]/ret.155(DetectMultiBackend::nndct_conv2d_153)
        self.module_154 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Conv[cv2]/ReLU[act]/14741(DetectMultiBackend::nndct_relu_154)
        self.module_155 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/ret.157(DetectMultiBackend::nndct_concat_155)
        self.module_156 = py_nndct.nn.Conv2d(in_channels=512, out_channels=512, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Conv[cv3]/Conv2d[conv]/ret.159(DetectMultiBackend::nndct_conv2d_156)
        self.module_157 = py_nndct.nn.ReLU(inplace=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/C3[model]/C3[23]/Conv[cv3]/ReLU[act]/14766(DetectMultiBackend::nndct_relu_157)
        self.module_158 = py_nndct.nn.Conv2d(in_channels=128, out_channels=255, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/Conv2d[m]/ModuleList[0]/ret.161(DetectMultiBackend::nndct_conv2d_158)
        self.module_159 = py_nndct.nn.Module('nndct_shape') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/14788(DetectMultiBackend::nndct_shape_159)
        self.module_160 = py_nndct.nn.Module('nndct_shape') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/14794(DetectMultiBackend::nndct_shape_160)
        self.module_161 = py_nndct.nn.Module('nndct_shape') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/14797(DetectMultiBackend::nndct_shape_161)
        self.module_162 = py_nndct.nn.Module('nndct_reshape') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.163(DetectMultiBackend::nndct_reshape_162)
        self.module_163 = py_nndct.nn.Module('nndct_permute') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.165(DetectMultiBackend::nndct_permute_163)
        self.module_164 = py_nndct.nn.Module('nndct_contiguous') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.167(DetectMultiBackend::nndct_contiguous_164)
        self.module_165 = py_nndct.nn.Module('nndct_arange') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/14877(DetectMultiBackend::nndct_arange_165)
        self.module_166 = py_nndct.nn.Module('nndct_arange') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/14882(DetectMultiBackend::nndct_arange_166)
        self.module_167 = py_nndct.nn.Module('aten::meshgrid') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/14886(DetectMultiBackend::aten_meshgrid_167)
        self.module_168 = py_nndct.nn.Module('nndct_stack') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/14890(DetectMultiBackend::nndct_stack_168)
        self.module_169 = py_nndct.nn.expand() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/14896(DetectMultiBackend::nndct_expand_169)
        self.module_170 = py_nndct.nn.Sub() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/16086(DetectMultiBackend::nndct_elementwise_sub_170)
        self.module_171 = py_nndct.nn.Module('nndct_select') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/14902(DetectMultiBackend::nndct_select_171)
        self.module_172 = py_nndct.nn.Module('nndct_elemwise_mul') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/16088(DetectMultiBackend::nndct_elemwise_mul_172)
        self.module_173 = py_nndct.nn.Module('nndct_reshape') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/14914(DetectMultiBackend::nndct_reshape_173)
        self.module_174 = py_nndct.nn.expand() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/14920(DetectMultiBackend::nndct_expand_174)
        self.module_175 = py_nndct.nn.Sigmoid() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.171(DetectMultiBackend::nndct_sigmoid_175)
        self.module_176 = py_nndct.nn.strided_slice() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/14970(DetectMultiBackend::nndct_strided_slice_176)
        self.module_177 = py_nndct.nn.strided_slice() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15016(DetectMultiBackend::nndct_strided_slice_177)
        self.module_178 = py_nndct.nn.strided_slice() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15062(DetectMultiBackend::nndct_strided_slice_178)
        self.module_179 = py_nndct.nn.Module('nndct_elemwise_mul') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.181(DetectMultiBackend::nndct_elemwise_mul_179)
        self.module_180 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.183(DetectMultiBackend::nndct_elemwise_add_180)
        self.module_181 = py_nndct.nn.Module('nndct_elemwise_mul') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.185(DetectMultiBackend::nndct_elemwise_mul_181)
        self.module_182 = py_nndct.nn.Module('nndct_elemwise_mul') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.187(DetectMultiBackend::nndct_elemwise_mul_182)
        self.module_183 = py_nndct.nn.Module('aten::pow') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.189(DetectMultiBackend::aten_pow_183)
        self.module_184 = py_nndct.nn.Module('nndct_elemwise_mul') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.191(DetectMultiBackend::nndct_elemwise_mul_184)
        self.module_185 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.193(DetectMultiBackend::nndct_concat_185)
        self.module_186 = py_nndct.nn.Module('nndct_elemwise_mul') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.195(DetectMultiBackend::nndct_elemwise_mul_186)
        self.module_187 = py_nndct.nn.Module('nndct_elemwise_mul') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.197(DetectMultiBackend::nndct_elemwise_mul_187)
        self.module_188 = py_nndct.nn.Module('nndct_reshape') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.199(DetectMultiBackend::nndct_reshape_188)
        self.module_189 = py_nndct.nn.Conv2d(in_channels=256, out_channels=255, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/Conv2d[m]/ModuleList[1]/ret.201(DetectMultiBackend::nndct_conv2d_189)
        self.module_190 = py_nndct.nn.Module('nndct_shape') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15138(DetectMultiBackend::nndct_shape_190)
        self.module_191 = py_nndct.nn.Module('nndct_shape') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15144(DetectMultiBackend::nndct_shape_191)
        self.module_192 = py_nndct.nn.Module('nndct_shape') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15147(DetectMultiBackend::nndct_shape_192)
        self.module_193 = py_nndct.nn.Module('nndct_reshape') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.203(DetectMultiBackend::nndct_reshape_193)
        self.module_194 = py_nndct.nn.Module('nndct_permute') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.205(DetectMultiBackend::nndct_permute_194)
        self.module_195 = py_nndct.nn.Module('nndct_contiguous') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.207(DetectMultiBackend::nndct_contiguous_195)
        self.module_196 = py_nndct.nn.Module('nndct_arange') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15227(DetectMultiBackend::nndct_arange_196)
        self.module_197 = py_nndct.nn.Module('nndct_arange') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15232(DetectMultiBackend::nndct_arange_197)
        self.module_198 = py_nndct.nn.Module('aten::meshgrid') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15236(DetectMultiBackend::aten_meshgrid_198)
        self.module_199 = py_nndct.nn.Module('nndct_stack') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15240(DetectMultiBackend::nndct_stack_199)
        self.module_200 = py_nndct.nn.expand() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15246(DetectMultiBackend::nndct_expand_200)
        self.module_201 = py_nndct.nn.Sub() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/16098(DetectMultiBackend::nndct_elementwise_sub_201)
        self.module_202 = py_nndct.nn.Module('nndct_select') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15252(DetectMultiBackend::nndct_select_202)
        self.module_203 = py_nndct.nn.Module('nndct_elemwise_mul') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/16100(DetectMultiBackend::nndct_elemwise_mul_203)
        self.module_204 = py_nndct.nn.Module('nndct_reshape') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15263(DetectMultiBackend::nndct_reshape_204)
        self.module_205 = py_nndct.nn.expand() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15269(DetectMultiBackend::nndct_expand_205)
        self.module_206 = py_nndct.nn.Sigmoid() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.211(DetectMultiBackend::nndct_sigmoid_206)
        self.module_207 = py_nndct.nn.strided_slice() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15319(DetectMultiBackend::nndct_strided_slice_207)
        self.module_208 = py_nndct.nn.strided_slice() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15365(DetectMultiBackend::nndct_strided_slice_208)
        self.module_209 = py_nndct.nn.strided_slice() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15411(DetectMultiBackend::nndct_strided_slice_209)
        self.module_210 = py_nndct.nn.Module('nndct_elemwise_mul') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.221(DetectMultiBackend::nndct_elemwise_mul_210)
        self.module_211 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.223(DetectMultiBackend::nndct_elemwise_add_211)
        self.module_212 = py_nndct.nn.Module('nndct_elemwise_mul') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.225(DetectMultiBackend::nndct_elemwise_mul_212)
        self.module_213 = py_nndct.nn.Module('nndct_elemwise_mul') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.227(DetectMultiBackend::nndct_elemwise_mul_213)
        self.module_214 = py_nndct.nn.Module('aten::pow') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.229(DetectMultiBackend::aten_pow_214)
        self.module_215 = py_nndct.nn.Module('nndct_elemwise_mul') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.231(DetectMultiBackend::nndct_elemwise_mul_215)
        self.module_216 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.233(DetectMultiBackend::nndct_concat_216)
        self.module_217 = py_nndct.nn.Module('nndct_elemwise_mul') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.235(DetectMultiBackend::nndct_elemwise_mul_217)
        self.module_218 = py_nndct.nn.Module('nndct_elemwise_mul') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.237(DetectMultiBackend::nndct_elemwise_mul_218)
        self.module_219 = py_nndct.nn.Module('nndct_reshape') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.239(DetectMultiBackend::nndct_reshape_219)
        self.module_220 = py_nndct.nn.Conv2d(in_channels=512, out_channels=255, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/Conv2d[m]/ModuleList[2]/ret.241(DetectMultiBackend::nndct_conv2d_220)
        self.module_221 = py_nndct.nn.Module('nndct_shape') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15487(DetectMultiBackend::nndct_shape_221)
        self.module_222 = py_nndct.nn.Module('nndct_shape') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15493(DetectMultiBackend::nndct_shape_222)
        self.module_223 = py_nndct.nn.Module('nndct_shape') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15496(DetectMultiBackend::nndct_shape_223)
        self.module_224 = py_nndct.nn.Module('nndct_reshape') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.243(DetectMultiBackend::nndct_reshape_224)
        self.module_225 = py_nndct.nn.Module('nndct_permute') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.245(DetectMultiBackend::nndct_permute_225)
        self.module_226 = py_nndct.nn.Module('nndct_contiguous') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.247(DetectMultiBackend::nndct_contiguous_226)
        self.module_227 = py_nndct.nn.Module('nndct_arange') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15576(DetectMultiBackend::nndct_arange_227)
        self.module_228 = py_nndct.nn.Module('nndct_arange') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15581(DetectMultiBackend::nndct_arange_228)
        self.module_229 = py_nndct.nn.Module('aten::meshgrid') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15585(DetectMultiBackend::aten_meshgrid_229)
        self.module_230 = py_nndct.nn.Module('nndct_stack') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15589(DetectMultiBackend::nndct_stack_230)
        self.module_231 = py_nndct.nn.expand() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15595(DetectMultiBackend::nndct_expand_231)
        self.module_232 = py_nndct.nn.Sub() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/16110(DetectMultiBackend::nndct_elementwise_sub_232)
        self.module_233 = py_nndct.nn.Module('nndct_select') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15601(DetectMultiBackend::nndct_select_233)
        self.module_234 = py_nndct.nn.Module('nndct_elemwise_mul') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/16112(DetectMultiBackend::nndct_elemwise_mul_234)
        self.module_235 = py_nndct.nn.Module('nndct_reshape') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15612(DetectMultiBackend::nndct_reshape_235)
        self.module_236 = py_nndct.nn.expand() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15618(DetectMultiBackend::nndct_expand_236)
        self.module_237 = py_nndct.nn.Sigmoid() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.251(DetectMultiBackend::nndct_sigmoid_237)
        self.module_238 = py_nndct.nn.strided_slice() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15668(DetectMultiBackend::nndct_strided_slice_238)
        self.module_239 = py_nndct.nn.strided_slice() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15714(DetectMultiBackend::nndct_strided_slice_239)
        self.module_240 = py_nndct.nn.strided_slice() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/15760(DetectMultiBackend::nndct_strided_slice_240)
        self.module_241 = py_nndct.nn.Module('nndct_elemwise_mul') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.261(DetectMultiBackend::nndct_elemwise_mul_241)
        self.module_242 = py_nndct.nn.Add() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.263(DetectMultiBackend::nndct_elemwise_add_242)
        self.module_243 = py_nndct.nn.Module('nndct_elemwise_mul') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.265(DetectMultiBackend::nndct_elemwise_mul_243)
        self.module_244 = py_nndct.nn.Module('nndct_elemwise_mul') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.267(DetectMultiBackend::nndct_elemwise_mul_244)
        self.module_245 = py_nndct.nn.Module('aten::pow') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.269(DetectMultiBackend::aten_pow_245)
        self.module_246 = py_nndct.nn.Module('nndct_elemwise_mul') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.271(DetectMultiBackend::nndct_elemwise_mul_246)
        self.module_247 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.273(DetectMultiBackend::nndct_concat_247)
        self.module_248 = py_nndct.nn.Module('nndct_elemwise_mul') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.275(DetectMultiBackend::nndct_elemwise_mul_248)
        self.module_249 = py_nndct.nn.Module('nndct_elemwise_mul') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.277(DetectMultiBackend::nndct_elemwise_mul_249)
        self.module_250 = py_nndct.nn.Module('nndct_reshape') #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret.279(DetectMultiBackend::nndct_reshape_250)
        self.module_251 = py_nndct.nn.Cat() #DetectMultiBackend::DetectMultiBackend/DetectionModel[model]/Detect[model]/Detect[24]/ret(DetectMultiBackend::nndct_concat_251)
        self.model_model_24_anchors = torch.nn.parameter.Parameter(torch.Tensor(3, 3, 2))

    @py_nndct.nn.forward_processor
    def forward(self, *args):
        output_module_0 = self.module_0(data=2.0, dtype=torch.float, device='cuda')
        output_module_1 = self.module_1(data=32.0, dtype=torch.float, device='cuda')
        output_module_2 = self.module_2(data=2.0, dtype=torch.float, device='cuda')
        output_module_3 = self.module_3(data=3, dtype=torch.int32, device='cuda')
        output_module_4 = self.module_4(data=2.0, dtype=torch.float, device='cuda')
        output_module_5 = self.module_5(data=16.0, dtype=torch.float, device='cuda')
        output_module_6 = self.module_6(data=2.0, dtype=torch.float, device='cuda')
        output_module_7 = self.module_7(data=3, dtype=torch.int32, device='cuda')
        output_module_8 = self.module_8(data=2.0, dtype=torch.float, device='cuda')
        output_module_9 = self.module_9(data=8.0, dtype=torch.float, device='cuda')
        output_module_10 = self.module_10(data=2.0, dtype=torch.float, device='cuda')
        output_module_11 = self.module_11(data=3, dtype=torch.int32, device='cuda')
        output_module_12 = self.module_12(data=8.0, dtype=torch.float, device='cuda')
        output_module_13 = self.module_13(data=16.0, dtype=torch.float, device='cuda')
        output_module_14 = self.module_14(data=32.0, dtype=torch.float, device='cuda')
        output_module_15 = self.module_15(data=0.5, dtype=torch.float, device='cuda')
        output_module_16 = self.module_16(data=0.5, dtype=torch.float, device='cuda')
        output_module_17 = self.module_17(data=0.5, dtype=torch.float, device='cuda')
        output_module_18 = self.module_18(input=args[0])
        output_module_18 = self.module_19(output_module_18)
        output_module_18 = self.module_20(output_module_18)
        output_module_18 = self.module_21(output_module_18)
        output_module_18 = self.module_22(output_module_18)
        output_module_23 = self.module_23(output_module_18)
        output_module_23 = self.module_24(output_module_23)
        output_module_25 = self.module_25(output_module_23)
        output_module_25 = self.module_26(output_module_25)
        output_module_25 = self.module_27(output_module_25)
        output_module_25 = self.module_28(output_module_25)
        output_module_29 = self.module_29(input=output_module_23, other=output_module_25, alpha=1)
        output_module_30 = self.module_30(output_module_18)
        output_module_30 = self.module_31(output_module_30)
        output_module_29 = self.module_32(dim=1, tensors=[output_module_29,output_module_30])
        output_module_29 = self.module_33(output_module_29)
        output_module_29 = self.module_34(output_module_29)
        output_module_29 = self.module_35(output_module_29)
        output_module_29 = self.module_36(output_module_29)
        output_module_37 = self.module_37(output_module_29)
        output_module_37 = self.module_38(output_module_37)
        output_module_39 = self.module_39(output_module_37)
        output_module_39 = self.module_40(output_module_39)
        output_module_39 = self.module_41(output_module_39)
        output_module_39 = self.module_42(output_module_39)
        output_module_43 = self.module_43(input=output_module_37, other=output_module_39, alpha=1)
        output_module_44 = self.module_44(output_module_43)
        output_module_44 = self.module_45(output_module_44)
        output_module_44 = self.module_46(output_module_44)
        output_module_44 = self.module_47(output_module_44)
        output_module_48 = self.module_48(input=output_module_43, other=output_module_44, alpha=1)
        output_module_49 = self.module_49(output_module_29)
        output_module_49 = self.module_50(output_module_49)
        output_module_48 = self.module_51(dim=1, tensors=[output_module_48,output_module_49])
        output_module_48 = self.module_52(output_module_48)
        output_module_48 = self.module_53(output_module_48)
        output_module_54 = self.module_54(output_module_48)
        output_module_54 = self.module_55(output_module_54)
        output_module_56 = self.module_56(output_module_54)
        output_module_56 = self.module_57(output_module_56)
        output_module_58 = self.module_58(output_module_56)
        output_module_58 = self.module_59(output_module_58)
        output_module_58 = self.module_60(output_module_58)
        output_module_58 = self.module_61(output_module_58)
        output_module_62 = self.module_62(input=output_module_56, other=output_module_58, alpha=1)
        output_module_63 = self.module_63(output_module_62)
        output_module_63 = self.module_64(output_module_63)
        output_module_63 = self.module_65(output_module_63)
        output_module_63 = self.module_66(output_module_63)
        output_module_67 = self.module_67(input=output_module_62, other=output_module_63, alpha=1)
        output_module_68 = self.module_68(output_module_67)
        output_module_68 = self.module_69(output_module_68)
        output_module_68 = self.module_70(output_module_68)
        output_module_68 = self.module_71(output_module_68)
        output_module_72 = self.module_72(input=output_module_67, other=output_module_68, alpha=1)
        output_module_73 = self.module_73(output_module_54)
        output_module_73 = self.module_74(output_module_73)
        output_module_72 = self.module_75(dim=1, tensors=[output_module_72,output_module_73])
        output_module_72 = self.module_76(output_module_72)
        output_module_72 = self.module_77(output_module_72)
        output_module_78 = self.module_78(output_module_72)
        output_module_78 = self.module_79(output_module_78)
        output_module_80 = self.module_80(output_module_78)
        output_module_80 = self.module_81(output_module_80)
        output_module_82 = self.module_82(output_module_80)
        output_module_82 = self.module_83(output_module_82)
        output_module_82 = self.module_84(output_module_82)
        output_module_82 = self.module_85(output_module_82)
        output_module_86 = self.module_86(input=output_module_80, other=output_module_82, alpha=1)
        output_module_87 = self.module_87(output_module_78)
        output_module_87 = self.module_88(output_module_87)
        output_module_86 = self.module_89(dim=1, tensors=[output_module_86,output_module_87])
        output_module_86 = self.module_90(output_module_86)
        output_module_86 = self.module_91(output_module_86)
        output_module_86 = self.module_92(output_module_86)
        output_module_86 = self.module_93(output_module_86)
        output_module_94 = self.module_94(output_module_86)
        output_module_95 = self.module_95(output_module_94)
        output_module_96 = self.module_96(output_module_95)
        output_module_97 = self.module_97(dim=1, tensors=[output_module_86,output_module_94,output_module_95,output_module_96])
        output_module_97 = self.module_98(output_module_97)
        output_module_97 = self.module_99(output_module_97)
        output_module_97 = self.module_100(output_module_97)
        output_module_97 = self.module_101(output_module_97)
        output_module_102 = self.module_102(input=output_module_97, size=None, scale_factor=[2.0,2.0], mode='nearest')
        output_module_102 = self.module_103(dim=1, tensors=[output_module_102,output_module_72])
        output_module_104 = self.module_104(output_module_102)
        output_module_104 = self.module_105(output_module_104)
        output_module_104 = self.module_106(output_module_104)
        output_module_104 = self.module_107(output_module_104)
        output_module_104 = self.module_108(output_module_104)
        output_module_104 = self.module_109(output_module_104)
        output_module_110 = self.module_110(output_module_102)
        output_module_110 = self.module_111(output_module_110)
        output_module_104 = self.module_112(dim=1, tensors=[output_module_104,output_module_110])
        output_module_104 = self.module_113(output_module_104)
        output_module_104 = self.module_114(output_module_104)
        output_module_104 = self.module_115(output_module_104)
        output_module_104 = self.module_116(output_module_104)
        output_module_117 = self.module_117(input=output_module_104, size=None, scale_factor=[2.0,2.0], mode='nearest')
        output_module_117 = self.module_118(dim=1, tensors=[output_module_117,output_module_48])
        output_module_119 = self.module_119(output_module_117)
        output_module_119 = self.module_120(output_module_119)
        output_module_119 = self.module_121(output_module_119)
        output_module_119 = self.module_122(output_module_119)
        output_module_119 = self.module_123(output_module_119)
        output_module_119 = self.module_124(output_module_119)
        output_module_125 = self.module_125(output_module_117)
        output_module_125 = self.module_126(output_module_125)
        output_module_119 = self.module_127(dim=1, tensors=[output_module_119,output_module_125])
        output_module_119 = self.module_128(output_module_119)
        output_module_119 = self.module_129(output_module_119)
        output_module_130 = self.module_130(output_module_119)
        output_module_130 = self.module_131(output_module_130)
        output_module_130 = self.module_132(dim=1, tensors=[output_module_130,output_module_104])
        output_module_133 = self.module_133(output_module_130)
        output_module_133 = self.module_134(output_module_133)
        output_module_133 = self.module_135(output_module_133)
        output_module_133 = self.module_136(output_module_133)
        output_module_133 = self.module_137(output_module_133)
        output_module_133 = self.module_138(output_module_133)
        output_module_139 = self.module_139(output_module_130)
        output_module_139 = self.module_140(output_module_139)
        output_module_133 = self.module_141(dim=1, tensors=[output_module_133,output_module_139])
        output_module_133 = self.module_142(output_module_133)
        output_module_133 = self.module_143(output_module_133)
        output_module_144 = self.module_144(output_module_133)
        output_module_144 = self.module_145(output_module_144)
        output_module_144 = self.module_146(dim=1, tensors=[output_module_144,output_module_97])
        output_module_147 = self.module_147(output_module_144)
        output_module_147 = self.module_148(output_module_147)
        output_module_147 = self.module_149(output_module_147)
        output_module_147 = self.module_150(output_module_147)
        output_module_147 = self.module_151(output_module_147)
        output_module_147 = self.module_152(output_module_147)
        output_module_153 = self.module_153(output_module_144)
        output_module_153 = self.module_154(output_module_153)
        output_module_147 = self.module_155(dim=1, tensors=[output_module_147,output_module_153])
        output_module_147 = self.module_156(output_module_147)
        output_module_147 = self.module_157(output_module_147)
        output_module_158 = self.module_158(output_module_119)
        output_module_159 = self.module_159(input=output_module_158, dim=0)
        output_module_160 = self.module_160(input=output_module_158, dim=2)
        output_module_161 = self.module_161(input=output_module_158, dim=3)
        output_module_162 = self.module_162(input=output_module_158, shape=[output_module_159,3,85,output_module_160,output_module_161])
        output_module_162 = self.module_163(dims=[0,1,3,4,2], input=output_module_162)
        output_module_162 = self.module_164(output_module_162)
        output_module_165 = self.module_165(end=output_module_160, dtype=torch.float, device='cuda:0')
        output_module_166 = self.module_166(end=output_module_161, dtype=torch.float, device='cuda:0')
        output_module_167_0,output_module_167_1 = self.module_167({'tensors': [output_module_165,output_module_166],'indexing': 'ij'})
        output_module_168 = self.module_168(tensors=[output_module_167_1,output_module_167_0], dim=2)
        output_module_168 = self.module_169(input=output_module_168, size=[1,3,output_module_160,output_module_161,2])
        output_module_168 = self.module_170(input=output_module_168, other=output_module_17, alpha=1)
        output_module_171 = self.module_171(input=self.model_model_24_anchors, dim=0, index=0)
        output_module_172 = self.module_172(input=output_module_171, other=output_module_12)
        output_module_173 = self.module_173(input=output_module_172, shape=[1,3,1,1,2])
        output_module_173 = self.module_174(input=output_module_173, size=[1,3,output_module_160,output_module_161,2])
        output_module_162 = self.module_175(output_module_162)
        output_module_176 = self.module_176(input=output_module_162, dim=[0,1,2,3,4], start=[0,0,0,0,0], end=[9223372036854775807,9223372036854775807,9223372036854775807,9223372036854775807,2], step=[1,1,1,1,1])
        output_module_177 = self.module_177(input=output_module_162, dim=[0,1,2,3,4], start=[0,0,0,0,2], end=[9223372036854775807,9223372036854775807,9223372036854775807,9223372036854775807,4], step=[1,1,1,1,1])
        output_module_178 = self.module_178(input=output_module_162, dim=[0,1,2,3,4], start=[0,0,0,0,4], end=[9223372036854775807,9223372036854775807,9223372036854775807,9223372036854775807,85], step=[1,1,1,1,1])
        output_module_176 = self.module_179(input=output_module_176, other=output_module_8)
        output_module_176 = self.module_180(input=output_module_176, other=output_module_168, alpha=1)
        output_module_176 = self.module_181(input=output_module_176, other=output_module_9)
        output_module_177 = self.module_182(input=output_module_177, other=output_module_10)
        output_module_177 = self.module_183({'self': output_module_177,'exponent': 2})
        output_module_177 = self.module_184(input=output_module_177, other=output_module_173)
        output_module_176 = self.module_185(dim=4, tensors=[output_module_176,output_module_177,output_module_178])
        output_module_186 = self.module_186(input=output_module_161, other=output_module_11)
        output_module_186 = self.module_187(input=output_module_186, other=output_module_160)
        output_module_176 = self.module_188(input=output_module_176, shape=[output_module_159,output_module_186,85])
        output_module_189 = self.module_189(output_module_133)
        output_module_190 = self.module_190(input=output_module_189, dim=0)
        output_module_191 = self.module_191(input=output_module_189, dim=2)
        output_module_192 = self.module_192(input=output_module_189, dim=3)
        output_module_193 = self.module_193(input=output_module_189, shape=[output_module_190,3,85,output_module_191,output_module_192])
        output_module_193 = self.module_194(dims=[0,1,3,4,2], input=output_module_193)
        output_module_193 = self.module_195(output_module_193)
        output_module_196 = self.module_196(end=output_module_191, dtype=torch.float, device='cuda:0')
        output_module_197 = self.module_197(end=output_module_192, dtype=torch.float, device='cuda:0')
        output_module_198_0,output_module_198_1 = self.module_198({'tensors': [output_module_196,output_module_197],'indexing': 'ij'})
        output_module_199 = self.module_199(tensors=[output_module_198_1,output_module_198_0], dim=2)
        output_module_199 = self.module_200(input=output_module_199, size=[1,3,output_module_191,output_module_192,2])
        output_module_199 = self.module_201(input=output_module_199, other=output_module_16, alpha=1)
        output_module_202 = self.module_202(input=self.model_model_24_anchors, dim=0, index=1)
        output_module_203 = self.module_203(input=output_module_202, other=output_module_13)
        output_module_204 = self.module_204(input=output_module_203, shape=[1,3,1,1,2])
        output_module_204 = self.module_205(input=output_module_204, size=[1,3,output_module_191,output_module_192,2])
        output_module_193 = self.module_206(output_module_193)
        output_module_207 = self.module_207(input=output_module_193, dim=[0,1,2,3,4], start=[0,0,0,0,0], end=[9223372036854775807,9223372036854775807,9223372036854775807,9223372036854775807,2], step=[1,1,1,1,1])
        output_module_208 = self.module_208(input=output_module_193, dim=[0,1,2,3,4], start=[0,0,0,0,2], end=[9223372036854775807,9223372036854775807,9223372036854775807,9223372036854775807,4], step=[1,1,1,1,1])
        output_module_209 = self.module_209(input=output_module_193, dim=[0,1,2,3,4], start=[0,0,0,0,4], end=[9223372036854775807,9223372036854775807,9223372036854775807,9223372036854775807,85], step=[1,1,1,1,1])
        output_module_207 = self.module_210(input=output_module_207, other=output_module_4)
        output_module_207 = self.module_211(input=output_module_207, other=output_module_199, alpha=1)
        output_module_207 = self.module_212(input=output_module_207, other=output_module_5)
        output_module_208 = self.module_213(input=output_module_208, other=output_module_6)
        output_module_208 = self.module_214({'self': output_module_208,'exponent': 2})
        output_module_208 = self.module_215(input=output_module_208, other=output_module_204)
        output_module_207 = self.module_216(dim=4, tensors=[output_module_207,output_module_208,output_module_209])
        output_module_217 = self.module_217(input=output_module_192, other=output_module_7)
        output_module_217 = self.module_218(input=output_module_217, other=output_module_191)
        output_module_207 = self.module_219(input=output_module_207, shape=[output_module_190,output_module_217,85])
        output_module_147 = self.module_220(output_module_147)
        output_module_221 = self.module_221(input=output_module_147, dim=0)
        output_module_222 = self.module_222(input=output_module_147, dim=2)
        output_module_223 = self.module_223(input=output_module_147, dim=3)
        output_module_224 = self.module_224(input=output_module_147, shape=[output_module_221,3,85,output_module_222,output_module_223])
        output_module_224 = self.module_225(dims=[0,1,3,4,2], input=output_module_224)
        output_module_224 = self.module_226(output_module_224)
        output_module_227 = self.module_227(end=output_module_222, dtype=torch.float, device='cuda:0')
        output_module_228 = self.module_228(end=output_module_223, dtype=torch.float, device='cuda:0')
        output_module_229_0,output_module_229_1 = self.module_229({'tensors': [output_module_227,output_module_228],'indexing': 'ij'})
        output_module_230 = self.module_230(tensors=[output_module_229_1,output_module_229_0], dim=2)
        output_module_230 = self.module_231(input=output_module_230, size=[1,3,output_module_222,output_module_223,2])
        output_module_230 = self.module_232(input=output_module_230, other=output_module_15, alpha=1)
        output_module_233 = self.module_233(input=self.model_model_24_anchors, dim=0, index=2)
        output_module_234 = self.module_234(input=output_module_233, other=output_module_14)
        output_module_235 = self.module_235(input=output_module_234, shape=[1,3,1,1,2])
        output_module_235 = self.module_236(input=output_module_235, size=[1,3,output_module_222,output_module_223,2])
        output_module_224 = self.module_237(output_module_224)
        output_module_238 = self.module_238(input=output_module_224, dim=[0,1,2,3,4], start=[0,0,0,0,0], end=[9223372036854775807,9223372036854775807,9223372036854775807,9223372036854775807,2], step=[1,1,1,1,1])
        output_module_239 = self.module_239(input=output_module_224, dim=[0,1,2,3,4], start=[0,0,0,0,2], end=[9223372036854775807,9223372036854775807,9223372036854775807,9223372036854775807,4], step=[1,1,1,1,1])
        output_module_240 = self.module_240(input=output_module_224, dim=[0,1,2,3,4], start=[0,0,0,0,4], end=[9223372036854775807,9223372036854775807,9223372036854775807,9223372036854775807,85], step=[1,1,1,1,1])
        output_module_238 = self.module_241(input=output_module_238, other=output_module_0)
        output_module_238 = self.module_242(input=output_module_238, other=output_module_230, alpha=1)
        output_module_238 = self.module_243(input=output_module_238, other=output_module_1)
        output_module_239 = self.module_244(input=output_module_239, other=output_module_2)
        output_module_239 = self.module_245({'self': output_module_239,'exponent': 2})
        output_module_239 = self.module_246(input=output_module_239, other=output_module_235)
        output_module_238 = self.module_247(dim=4, tensors=[output_module_238,output_module_239,output_module_240])
        output_module_248 = self.module_248(input=output_module_223, other=output_module_3)
        output_module_248 = self.module_249(input=output_module_248, other=output_module_222)
        output_module_238 = self.module_250(input=output_module_238, shape=[output_module_221,output_module_248,85])
        output_module_176 = self.module_251(dim=1, tensors=[output_module_176,output_module_207,output_module_238])
        return output_module_176
